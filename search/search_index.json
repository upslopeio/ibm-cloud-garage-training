{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IBM Cloud Garage Learning Standards Computer Setup (Before Class) In order to complete the course, you need several pieces of software installed. Mac is better than Windows for Cloud Garage Development If you have the choice, get a Mac. It will greatly simplify your life. It should take about 30m to install everything on your Mac. If you have Windows, you must use WSL. It will take several hours to install WSL plus the required libraries on your Windows machine. Please plan for this and set up your machines before class. Windows Users Windows Setup Guide Mac Users Mac Setup Guide Prerequisites Before joining class you should already be able to do the following things: Personal Computing Skills Make windows full-width / full-height but not full screen with a key command Recover from making windows full-screen Split windows left and right (half screen) Install applications Switch between windows and applications with keyboard Command Line Change directories (up, down) Describe how PATH works Change PATH in .zshrc Determine if an executable is in path with which Print the working directory List the contents of a directory Move and copy files Navigate history using arrow keys and history command Clear the screen using both clear and CMD+K Create and edit a file at the command line using touch and vim Learning Standards By the end of this course you should be able to demonstrate the following skills: Basics VSCode LiveShare - both host and guest Create files in the correct directory / move files Git Clone a Gogs repo Add / commit / pull / push changes Resolve merge conflicts visually in VSCode Restore files you don't want to commit Create branches, make commits on branches and push code to branches Create pull requests and merge pull requests Explain the add/commit/push flow including untracked files Building Applications HTML/CSS Build HTML forms with labels attached to inputs Link CSS files JavaScript Write code with functions, including ES6 functions Solve basic algorithms with loops, variables, data types, conditional statements Parse and generate JSON Use browser APIs such as localStorage React Build components with correct casing of files / component names / import / export syntax Write valid JSX including className, htmlFor, expressions in interpolation Create and render lists of elements Conditionally render elements Write components that have state, form fields and events that update state Use an efficient developer workflow (run and watch tests, run the app) Create new React applications Describe how single-page applications work Testing in JavaScript Describe the 3 parts of a test (SEA / PRE) Write valid test / describe / it (at least \"test\") blocks Use expect along with Jest matchers to write assertions Describe what to test (using ZOMBIES?) Testing in React Use testing library methods to fill in fields, click buttons, assert Run and watch tests with npm test Devops Docker Explain images and containers Create a Dockerfile containing nginx and build it Run a container in the foreground, mapping ports List images and containers Show running containers Pull and push images Kubernetes Explain and diagram common K8s object including Describe K8s including things like etcd and the control plane Use the command line to debug an application using get, describe, logs... OpenShift Explain the relationship between OpenShift and Kubernetes Login to oc locally using the UI to get the token Describe projects and how they relate to kubernetes Helm Create a basic Helm chart Modify a default helm chart to work on the class's OpenShift cluster CI Write a sequence diagram of CI Setup a Tekton pipeline and make it pass for a React application CD Sequence diagram CD with Gitops Setup an Argo project manually in the UI Process Design Thinking Explain what design thinking is and how it fits into the flow XP Describe inceptions, including when they happen, and what happens in them Describe an IPM, including when it happens, and what happens in them Describe standups, including when they happen, and what happens in them Describe retros, including when they happen, and what happens in them Explain what a backlog is and how it's managed including who mostly write stories Diagram the flow of a story (branches, story statuses, pipelines, QA environments...) Write user stories that follow INVEST including good bug formats Explain the differences in lifecycle between bugs / chores / features Pair Program using a variety of techniques TDD Describe red-green-refactor and rules for TDD Book recommendations See the reading list","title":"IBM Cloud Garage Learning Standards"},{"location":"#ibm-cloud-garage-learning-standards","text":"","title":"IBM Cloud Garage Learning Standards"},{"location":"#computer-setup-before-class","text":"In order to complete the course, you need several pieces of software installed. Mac is better than Windows for Cloud Garage Development If you have the choice, get a Mac. It will greatly simplify your life. It should take about 30m to install everything on your Mac. If you have Windows, you must use WSL. It will take several hours to install WSL plus the required libraries on your Windows machine. Please plan for this and set up your machines before class.","title":"Computer Setup (Before Class)"},{"location":"#windows-users","text":"Windows Setup Guide","title":"Windows Users"},{"location":"#mac-users","text":"Mac Setup Guide","title":"Mac Users"},{"location":"#prerequisites","text":"Before joining class you should already be able to do the following things: Personal Computing Skills Make windows full-width / full-height but not full screen with a key command Recover from making windows full-screen Split windows left and right (half screen) Install applications Switch between windows and applications with keyboard Command Line Change directories (up, down) Describe how PATH works Change PATH in .zshrc Determine if an executable is in path with which Print the working directory List the contents of a directory Move and copy files Navigate history using arrow keys and history command Clear the screen using both clear and CMD+K Create and edit a file at the command line using touch and vim","title":"Prerequisites"},{"location":"#learning-standards","text":"By the end of this course you should be able to demonstrate the following skills: Basics VSCode LiveShare - both host and guest Create files in the correct directory / move files Git Clone a Gogs repo Add / commit / pull / push changes Resolve merge conflicts visually in VSCode Restore files you don't want to commit Create branches, make commits on branches and push code to branches Create pull requests and merge pull requests Explain the add/commit/push flow including untracked files Building Applications HTML/CSS Build HTML forms with labels attached to inputs Link CSS files JavaScript Write code with functions, including ES6 functions Solve basic algorithms with loops, variables, data types, conditional statements Parse and generate JSON Use browser APIs such as localStorage React Build components with correct casing of files / component names / import / export syntax Write valid JSX including className, htmlFor, expressions in interpolation Create and render lists of elements Conditionally render elements Write components that have state, form fields and events that update state Use an efficient developer workflow (run and watch tests, run the app) Create new React applications Describe how single-page applications work Testing in JavaScript Describe the 3 parts of a test (SEA / PRE) Write valid test / describe / it (at least \"test\") blocks Use expect along with Jest matchers to write assertions Describe what to test (using ZOMBIES?) Testing in React Use testing library methods to fill in fields, click buttons, assert Run and watch tests with npm test Devops Docker Explain images and containers Create a Dockerfile containing nginx and build it Run a container in the foreground, mapping ports List images and containers Show running containers Pull and push images Kubernetes Explain and diagram common K8s object including Describe K8s including things like etcd and the control plane Use the command line to debug an application using get, describe, logs... OpenShift Explain the relationship between OpenShift and Kubernetes Login to oc locally using the UI to get the token Describe projects and how they relate to kubernetes Helm Create a basic Helm chart Modify a default helm chart to work on the class's OpenShift cluster CI Write a sequence diagram of CI Setup a Tekton pipeline and make it pass for a React application CD Sequence diagram CD with Gitops Setup an Argo project manually in the UI Process Design Thinking Explain what design thinking is and how it fits into the flow XP Describe inceptions, including when they happen, and what happens in them Describe an IPM, including when it happens, and what happens in them Describe standups, including when they happen, and what happens in them Describe retros, including when they happen, and what happens in them Explain what a backlog is and how it's managed including who mostly write stories Diagram the flow of a story (branches, story statuses, pipelines, QA environments...) Write user stories that follow INVEST including good bug formats Explain the differences in lifecycle between bugs / chores / features Pair Program using a variety of techniques TDD Describe red-green-refactor and rules for TDD","title":"Learning Standards"},{"location":"#book-recommendations","text":"See the reading list","title":"Book recommendations"},{"location":"standards/","text":"","title":"Standards"},{"location":"xp/","text":"Garage Method Design Thinking Lean Product Development (build / measure / learn) XP (XP) Extreme Programming https://en.wikipedia.org/wiki/Extreme_programming Cycles Project Cycle Design Thinking Workshop Inception - 1-time-per-project kickoff with developers 2-3 weeks of stories in the backlog Iterations Pivot / persevere decision Weekly Iteration Cycle Iteration Planning Meeting (IPM) - Devs, Product Owner, UX - 30m Retrospective \"If someone makes a mistake, shame on us for making so easy to make that mistake\" Daily Cycle Standup - Product Owner, Devs, the UX - 5m Figure out who's going to pair with whom on what Pairs rotate daily - the \"lottery count\" (\"bus count\") Work the backlog: choose a story write tests (locally) write code (locally) do user story acceptance pushing code dozens of times per day Devops Cycle Every git push Continuous Integration build will run automatically Deploy to some lower environment (QA env) (optionally) deploy to Prod whenever master/main is updated Developer manually indicates which build should be in prod Continuous Delivery TDD Cycle Stakeholder Cycle (monthly? as-needed?) Playbacks: we converse with other members of the business Show and tell: developers geeking out Roles Developers fullstack - K8s, frontend, server-side, persistence, devops pipelines everything from CSS all the way to devops Architecture \"Just in time\" YAGNI - Ya Ain't Gonna Need It","title":"Garage Method"},{"location":"xp/#garage-method","text":"Design Thinking Lean Product Development (build / measure / learn) XP","title":"Garage Method"},{"location":"xp/#xp-extreme-programming","text":"https://en.wikipedia.org/wiki/Extreme_programming","title":"(XP) Extreme Programming"},{"location":"xp/#cycles","text":"","title":"Cycles"},{"location":"xp/#project-cycle","text":"Design Thinking Workshop Inception - 1-time-per-project kickoff with developers 2-3 weeks of stories in the backlog Iterations Pivot / persevere decision","title":"Project Cycle"},{"location":"xp/#weekly-iteration-cycle","text":"Iteration Planning Meeting (IPM) - Devs, Product Owner, UX - 30m Retrospective \"If someone makes a mistake, shame on us for making so easy to make that mistake\"","title":"Weekly Iteration Cycle"},{"location":"xp/#daily-cycle","text":"Standup - Product Owner, Devs, the UX - 5m Figure out who's going to pair with whom on what Pairs rotate daily - the \"lottery count\" (\"bus count\") Work the backlog: choose a story write tests (locally) write code (locally) do user story acceptance pushing code dozens of times per day","title":"Daily Cycle"},{"location":"xp/#devops-cycle","text":"Every git push Continuous Integration build will run automatically Deploy to some lower environment (QA env) (optionally) deploy to Prod whenever master/main is updated Developer manually indicates which build should be in prod Continuous Delivery","title":"Devops Cycle"},{"location":"xp/#tdd-cycle","text":"","title":"TDD Cycle"},{"location":"xp/#stakeholder-cycle-monthly-as-needed","text":"Playbacks: we converse with other members of the business Show and tell: developers geeking out","title":"Stakeholder Cycle (monthly? as-needed?)"},{"location":"xp/#roles","text":"","title":"Roles"},{"location":"xp/#developers","text":"fullstack - K8s, frontend, server-side, persistence, devops pipelines everything from CSS all the way to devops","title":"Developers"},{"location":"xp/#architecture","text":"\"Just in time\" YAGNI - Ya Ain't Gonna Need It","title":"Architecture"},{"location":"argo/","text":"Argo - Continuous Delivery Prerequisites Tekton pipeline is green - all stages are passing Setup Use the following instructions to set up a new continuous delivery controller using ArgoCD. Stop : make sure your pipeline is green before setting up ArgoCD Determine the name of the new project. Usually project<user-number>-<app-repo-name>-<environment> Update GitOps repository Run oc console to open the web console. Click the \"9 box\" menu, then select \"Git Ops\", then copy the http link. In the terminal, CD to your $HOME directory cd ~ Type git clone , paste in the gitops http url, hit enter. cd gitops git checkout -b add-<user-number>-<app-repo-name>-<environment> or git checkout -b add-<squad-number>-<app-repo-name>-<environment> Run code . and find the application you want to deploy under the /qa folder, and copy that entire folder to the new <environment> folder (i.e. production) Git add, commit, and push to your branch. Create a new pull request and immediately merge it. After merging, click the delete branch button. Add ArgoCD controller Run oc console to open the web console. On the OpenShift console page, Click the \"9 box\" menu, then select \"ArgoCD\" Accept the security warnings (easiest in Chrome) Login via openshift Allow selected permissions Click \"new app\" Fill in the form General Application name: This must be unique to the entire cluster. use project<user-number>-<app-repo-name>-<environment> or squad<squad-number>-<app-repo-name>-<environment> Project = default Sync Policy = automatic Check PRUNE RESOURCES and SELF HEAL Sync Options = Check \"use a schema to validate resource manifests\" and \"auto-create namespace\" Source Repository = url to gitops repository (\"9 box\" menu, click \"Git Ops\") Revision = HEAD Path = path to the project environment folder you just created. Usually <environment>/project<user-number>/<app-repo-name> Destination cluster = select the one available option namespace = the target namespace. Usually project<user-number>-<app-repo-name>-<environment> Click create at the top Now the ArgoCD controller is displayed. Shortly you will notice that the pod creation failed, and it has a status of ImagePullBackOff . This is because the new namespace is trying to pull images created in another namespace. You will fix this in the next step. Give the new environment permission to pull images from qa namespace run oc policy add-role-to-group system:image-puller system:serviceaccounts:<new-project-name> -n <dev-project-name> If successful, you will see something like the following: clusterrole.rbac.authorization.k8s.io/system:image-puller added: \"system:serviceaccounts:<new-project-name>\" Click the menu on the right side of the pod in ArgoCD then select \"delete\". OpenShift will immediately create a new pod and this time it will have permission to pull images from the other namespace. If successful, you will see something like the following when you open the ArgoCD controller (Note: every heart is green): What just happened? You have a new environment. Let's assume it is production . qa and production are running the same version of your application because the version number specified in gitops <environment>/project<user-number>/<app-repo-name>/requirements.yaml is the same in both environments. Your CI/CD pipeline now looks like the following sequence diagram: Promoting a new version to production Update the application version in the package.json file and commit it, so a new image is built by the Tekton pipeline. Update GitOps repository In the terminal, CD to your $HOME directory cd ~/gitops git checkout -b update-<user-number>-<app-repo-name>-<environment> or git checkout -b update-<squad-number>-<app-repo-name>-<environment> Update and update the version in the <environment>/project<user-number>/<app-repo-name>/requirements.yaml file. Git add, commit, and push to your branch. Create a new pull request and immediately merge it. After merging, click the delete branch button. Open the ArgoCD controller and note the new version is running in production. Troubleshooting Error Message Solution ErrImagePull or ImagePullBackOff Allow your production namespace to pull images created from your dev namespace run oc policy add-role-to-group system:image-puller system:serviceaccounts:<new-project> -n <dev-project> error: object has been deleted The Argo project has the same name as your repository. Delete the Argo project and recreate it with a new unique name. Resources: https://github.com/argoproj/argo-cd/issues/2650 https://argoproj.github.io/argo-cd/faq/#why-is-my-app-out-of-sync-even-after-syncing","title":"Argo - Continuous Delivery"},{"location":"argo/#argo-continuous-delivery","text":"","title":"Argo - Continuous Delivery"},{"location":"argo/#prerequisites","text":"Tekton pipeline is green - all stages are passing","title":"Prerequisites"},{"location":"argo/#setup","text":"Use the following instructions to set up a new continuous delivery controller using ArgoCD. Stop : make sure your pipeline is green before setting up ArgoCD Determine the name of the new project. Usually project<user-number>-<app-repo-name>-<environment> Update GitOps repository Run oc console to open the web console. Click the \"9 box\" menu, then select \"Git Ops\", then copy the http link. In the terminal, CD to your $HOME directory cd ~ Type git clone , paste in the gitops http url, hit enter. cd gitops git checkout -b add-<user-number>-<app-repo-name>-<environment> or git checkout -b add-<squad-number>-<app-repo-name>-<environment> Run code . and find the application you want to deploy under the /qa folder, and copy that entire folder to the new <environment> folder (i.e. production) Git add, commit, and push to your branch. Create a new pull request and immediately merge it. After merging, click the delete branch button. Add ArgoCD controller Run oc console to open the web console. On the OpenShift console page, Click the \"9 box\" menu, then select \"ArgoCD\" Accept the security warnings (easiest in Chrome) Login via openshift Allow selected permissions Click \"new app\" Fill in the form General Application name: This must be unique to the entire cluster. use project<user-number>-<app-repo-name>-<environment> or squad<squad-number>-<app-repo-name>-<environment> Project = default Sync Policy = automatic Check PRUNE RESOURCES and SELF HEAL Sync Options = Check \"use a schema to validate resource manifests\" and \"auto-create namespace\" Source Repository = url to gitops repository (\"9 box\" menu, click \"Git Ops\") Revision = HEAD Path = path to the project environment folder you just created. Usually <environment>/project<user-number>/<app-repo-name> Destination cluster = select the one available option namespace = the target namespace. Usually project<user-number>-<app-repo-name>-<environment> Click create at the top Now the ArgoCD controller is displayed. Shortly you will notice that the pod creation failed, and it has a status of ImagePullBackOff . This is because the new namespace is trying to pull images created in another namespace. You will fix this in the next step. Give the new environment permission to pull images from qa namespace run oc policy add-role-to-group system:image-puller system:serviceaccounts:<new-project-name> -n <dev-project-name> If successful, you will see something like the following: clusterrole.rbac.authorization.k8s.io/system:image-puller added: \"system:serviceaccounts:<new-project-name>\" Click the menu on the right side of the pod in ArgoCD then select \"delete\". OpenShift will immediately create a new pod and this time it will have permission to pull images from the other namespace. If successful, you will see something like the following when you open the ArgoCD controller (Note: every heart is green): What just happened? You have a new environment. Let's assume it is production . qa and production are running the same version of your application because the version number specified in gitops <environment>/project<user-number>/<app-repo-name>/requirements.yaml is the same in both environments. Your CI/CD pipeline now looks like the following sequence diagram:","title":"Setup"},{"location":"argo/#promoting-a-new-version-to-production","text":"Update the application version in the package.json file and commit it, so a new image is built by the Tekton pipeline. Update GitOps repository In the terminal, CD to your $HOME directory cd ~/gitops git checkout -b update-<user-number>-<app-repo-name>-<environment> or git checkout -b update-<squad-number>-<app-repo-name>-<environment> Update and update the version in the <environment>/project<user-number>/<app-repo-name>/requirements.yaml file. Git add, commit, and push to your branch. Create a new pull request and immediately merge it. After merging, click the delete branch button. Open the ArgoCD controller and note the new version is running in production.","title":"Promoting a new version to production"},{"location":"argo/#troubleshooting","text":"Error Message Solution ErrImagePull or ImagePullBackOff Allow your production namespace to pull images created from your dev namespace run oc policy add-role-to-group system:image-puller system:serviceaccounts:<new-project> -n <dev-project> error: object has been deleted The Argo project has the same name as your repository. Delete the Argo project and recreate it with a new unique name.","title":"Troubleshooting"},{"location":"argo/#resources","text":"https://github.com/argoproj/argo-cd/issues/2650 https://argoproj.github.io/argo-cd/faq/#why-is-my-app-out-of-sync-even-after-syncing","title":"Resources:"},{"location":"argo/diagram/","text":"title Continuous Integration participant Developer participant Code Repo participant Tekton participant Image Registry participant Artifactory participant Argo participant K8s Dev participant GitOps Repo Developer->Code Repo: git push Code Repo->Tekton: webhook note right of Tekton: setup Tekton->Code Repo: git pull note right of Tekton: npm test note right of Tekton: build Tekton->Image Registry: docker push note right of Tekton: deploy Tekton->K8s Dev: helm upgrade K8s Dev->Image Registry: docker pull note right of K8s Dev: docker run... note right of Tekton: health Tekton->K8s Dev: GET /health note right of Tekton: tag-release Tekton->Code Repo: add tag note right of Tekton: img-release Tekton->Image Registry: docker push note right of Tekton: helm-release Tekton->Artifactory: publish helm chart note right of Tekton: gitops Tekton->GitOps Repo: update QA folder","title":"Diagram"},{"location":"computer-setup/ibmcloud/","text":"IBM Cloud Setup PLEASE READ CAREFULLY! Don't just copy/paste every command without reading Note for Windows Users: You'll run all of these commands from Ubuntu (WSL) Install the ibmcloud CLI Do you already have ibmcloud installed? which ibmcloud If you see output like /usr/local/bin/ibmcloud then you have successfully installed it. If you see output like not found then you need to install it: Visit https://cloud.ibm.com/docs/cli?topic=cli-install-ibmcloud-cli Follow the instructions for your operating system. Tip: You can use the shell script in the second section instead of the installer option. Install the ibmcloud container plugin Do you have the container plugin? ibmcloud plugin list You should see container-service in the list of plugins. If you do not see container-service then do the following: Visit https://cloud.ibm.com/docs/containers?topic=containers-cs_cli_install Follow the instructions At the time of this writing it's ibmcloud plugin install container-service Install required dependencies brew install yq@3 echo \"export PATH=\\\" $( brew --prefix yq@3 ) /bin:\\$PATH\\\"\" >> ~/.zshrc brew install jq Install the toolkit developer tools Visit https://cloudnativetoolkit.dev/getting-started/dev-env-setup Follow instructions. At the time of this writing, the commands are: curl -sL shell.cloudnativetoolkit.dev | bash - source ~/.zshrc After installing this, the following commands should all print a path: which igc which tkn which oc Verifying OC Plugins When you run oc plugin list you should see several lines, including one with kubectl-pipeline . If not, it's likely that your npm bin directory is not in your path. If you installed Node via NVM, this might work: nvm alias default node If you installed Node with the installer, this might work: echo \"export PATH=\\\"\\${HOME}/.npm/bin:\\${PATH}\\\"\" >> ~/.zshrc source ~/.zshrc Then run oc plugin list again. Get an API Key NOTE If you are installing tools before class starts, the cluster below might not be created yet, so skip these steps Log into https://cloud.ibm.com with your IBM email address \u203c\ufe0f Make sure that \"DTEV2\" is selected from the account menu (see below) Click on Manage > Access (IAM) Under \"My IBM Cloud API keys\" click \"View all\" Click \"Create an IBM Cloud API key\" Enter a name and create the key Download the key to your computer (if you don't, you'll have to create another one) Login to ibmcloud In order to test that your account works, login using your API key. Replace YOUR_API_KEY with your actual API key and then run this command: ibmcloud login --apikey YOUR_API_KEY -r us-south Run ibmcloud ks clusters to see the list of clusters you can access. NOTE: if you are following these instructions before class starts, the cluster list might be empty, and that's OK. You should see your cohort's cluster in the list. If you don't, it could be because: It's before class started, and we haven't created it yet You created your API key in the wrong account (your personal account, as opposed to DTEV2) You have not been granted access to the cluster - contact your instructor Access the OpenShift Cluster In order to login to the cluster from the command line, you must first log in on the website. Log into https://cloud.ibm.com with your IBM email address Make sure that \"DTEV2\" is selected from the account menu Under \"Resource Summary\" click \"Clusters\" Click your cohort's cluster Click \"OpenShift Web Console\" You should see the OpenShift web console (Optional) Configure ICC - fast cluster switcher Run icc --add-account name the account garage Paste in the API key you generated above Run icc --generate When you run icc you should see at least one cluster listed (the cluster for your cohort). When you run icc <cluster name> you should not see an error message.","title":"IBM Cloud Setup"},{"location":"computer-setup/ibmcloud/#ibm-cloud-setup","text":"","title":"IBM Cloud Setup"},{"location":"computer-setup/ibmcloud/#please-read-carefully","text":"Don't just copy/paste every command without reading Note for Windows Users: You'll run all of these commands from Ubuntu (WSL)","title":"PLEASE READ CAREFULLY!"},{"location":"computer-setup/ibmcloud/#install-the-ibmcloud-cli","text":"Do you already have ibmcloud installed? which ibmcloud If you see output like /usr/local/bin/ibmcloud then you have successfully installed it. If you see output like not found then you need to install it: Visit https://cloud.ibm.com/docs/cli?topic=cli-install-ibmcloud-cli Follow the instructions for your operating system. Tip: You can use the shell script in the second section instead of the installer option.","title":"Install the ibmcloud CLI"},{"location":"computer-setup/ibmcloud/#install-the-ibmcloud-container-plugin","text":"Do you have the container plugin? ibmcloud plugin list You should see container-service in the list of plugins. If you do not see container-service then do the following: Visit https://cloud.ibm.com/docs/containers?topic=containers-cs_cli_install Follow the instructions At the time of this writing it's ibmcloud plugin install container-service","title":"Install the ibmcloud container plugin"},{"location":"computer-setup/ibmcloud/#install-required-dependencies","text":"brew install yq@3 echo \"export PATH=\\\" $( brew --prefix yq@3 ) /bin:\\$PATH\\\"\" >> ~/.zshrc brew install jq","title":"Install required dependencies"},{"location":"computer-setup/ibmcloud/#install-the-toolkit-developer-tools","text":"Visit https://cloudnativetoolkit.dev/getting-started/dev-env-setup Follow instructions. At the time of this writing, the commands are: curl -sL shell.cloudnativetoolkit.dev | bash - source ~/.zshrc After installing this, the following commands should all print a path: which igc which tkn which oc","title":"Install the toolkit developer tools"},{"location":"computer-setup/ibmcloud/#verifying-oc-plugins","text":"When you run oc plugin list you should see several lines, including one with kubectl-pipeline . If not, it's likely that your npm bin directory is not in your path. If you installed Node via NVM, this might work: nvm alias default node If you installed Node with the installer, this might work: echo \"export PATH=\\\"\\${HOME}/.npm/bin:\\${PATH}\\\"\" >> ~/.zshrc source ~/.zshrc Then run oc plugin list again.","title":"Verifying OC Plugins"},{"location":"computer-setup/ibmcloud/#get-an-api-key","text":"NOTE If you are installing tools before class starts, the cluster below might not be created yet, so skip these steps Log into https://cloud.ibm.com with your IBM email address \u203c\ufe0f Make sure that \"DTEV2\" is selected from the account menu (see below) Click on Manage > Access (IAM) Under \"My IBM Cloud API keys\" click \"View all\" Click \"Create an IBM Cloud API key\" Enter a name and create the key Download the key to your computer (if you don't, you'll have to create another one)","title":"Get an API Key"},{"location":"computer-setup/ibmcloud/#login-to-ibmcloud","text":"In order to test that your account works, login using your API key. Replace YOUR_API_KEY with your actual API key and then run this command: ibmcloud login --apikey YOUR_API_KEY -r us-south Run ibmcloud ks clusters to see the list of clusters you can access. NOTE: if you are following these instructions before class starts, the cluster list might be empty, and that's OK. You should see your cohort's cluster in the list. If you don't, it could be because: It's before class started, and we haven't created it yet You created your API key in the wrong account (your personal account, as opposed to DTEV2) You have not been granted access to the cluster - contact your instructor","title":"Login to ibmcloud"},{"location":"computer-setup/ibmcloud/#access-the-openshift-cluster","text":"In order to login to the cluster from the command line, you must first log in on the website. Log into https://cloud.ibm.com with your IBM email address Make sure that \"DTEV2\" is selected from the account menu Under \"Resource Summary\" click \"Clusters\" Click your cohort's cluster Click \"OpenShift Web Console\" You should see the OpenShift web console","title":"Access the OpenShift Cluster"},{"location":"computer-setup/ibmcloud/#optional-configure-icc-fast-cluster-switcher","text":"Run icc --add-account name the account garage Paste in the API key you generated above Run icc --generate When you run icc you should see at least one cluster listed (the cluster for your cohort). When you run icc <cluster name> you should not see an error message.","title":"(Optional) Configure ICC - fast cluster switcher"},{"location":"computer-setup/mac/","text":"Mac Setup Guide Webex If you haven't already, Download Webex Meetings ZSH If you have a modern mac, zsh should already be your default shell . Open a new Terminal window (or tab) Run the following command: echo $SHELL You have ZSH if you see the following output: /bin/zsh If you see something else, like /bin/bash , then you need to install zsh. (Optional) oh-my-zsh Visit https://ohmyz.sh/ Follow instructions. At the time of writing, it's: sh -c \" $( curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \" Automatic Install Script sh -c \" $( curl -fsSL https://raw.githubusercontent.com/upslopeio/ibm-cloud-garage-training/main/computer-setup/setup-mac-linux.sh ) \" Turn on Autosave Automatic Setup complete If you ran the automatic setup and there were no errors, your setup is complete. If you saw errors, you can run through the following steps to manually verify each tool is installed. Homebrew Visit https://brew.sh/ Click the \"Copy\" link and run the command. At the time of this writing, it's: /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" Configure Git brew install git git config --global core.ignorecase false Set your name git config --global --list If you don't see your name and email, then run these commands: git config --global user.name \"<your actual name>\" git config --global user.email \"<your actual email>\" Install Helm brew install helm NodeJS with NVM Visit https://github.com/nvm-sh/nvm Follow the instructions At the time this article was written, the command is: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash source ~/.zshrc nvm install node nvm alias default node Install Visual Studio Code If you don't have Visual Studio Code, you can install it with Homebrew: brew install --cask visual-studio-code If those instructions don't work, you can follow these instructions Configure Visual Studio Code Install the Live Share extension : code --install-extension ms-vsliveshare.vsliveshare Turn on Autosave Install the YAML extension. code --install-extension redhat.vscode-yaml Docker Desktop You can install docker desktop via brew: brew install --cask docker Slack App It's helpful to have the Slack Mac App . IBM Cloud CLI Click the link below and follow the instructions: Install the IBM Cloud CLI Finish your first Assignment Assignments Repo","title":"Mac Setup Guide"},{"location":"computer-setup/mac/#mac-setup-guide","text":"","title":"Mac Setup Guide"},{"location":"computer-setup/mac/#webex","text":"If you haven't already, Download Webex Meetings","title":"Webex"},{"location":"computer-setup/mac/#zsh","text":"If you have a modern mac, zsh should already be your default shell . Open a new Terminal window (or tab) Run the following command: echo $SHELL You have ZSH if you see the following output: /bin/zsh If you see something else, like /bin/bash , then you need to install zsh.","title":"ZSH"},{"location":"computer-setup/mac/#optional-oh-my-zsh","text":"Visit https://ohmyz.sh/ Follow instructions. At the time of writing, it's: sh -c \" $( curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \"","title":"(Optional) oh-my-zsh"},{"location":"computer-setup/mac/#automatic-install-script","text":"sh -c \" $( curl -fsSL https://raw.githubusercontent.com/upslopeio/ibm-cloud-garage-training/main/computer-setup/setup-mac-linux.sh ) \" Turn on Autosave","title":"Automatic Install Script"},{"location":"computer-setup/mac/#automatic-setup-complete","text":"If you ran the automatic setup and there were no errors, your setup is complete. If you saw errors, you can run through the following steps to manually verify each tool is installed.","title":"Automatic Setup complete"},{"location":"computer-setup/mac/#homebrew","text":"Visit https://brew.sh/ Click the \"Copy\" link and run the command. At the time of this writing, it's: /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \"","title":"Homebrew"},{"location":"computer-setup/mac/#configure-git","text":"brew install git git config --global core.ignorecase false Set your name git config --global --list If you don't see your name and email, then run these commands: git config --global user.name \"<your actual name>\" git config --global user.email \"<your actual email>\"","title":"Configure Git"},{"location":"computer-setup/mac/#install-helm","text":"brew install helm","title":"Install Helm"},{"location":"computer-setup/mac/#nodejs-with-nvm","text":"Visit https://github.com/nvm-sh/nvm Follow the instructions At the time this article was written, the command is: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash source ~/.zshrc nvm install node nvm alias default node","title":"NodeJS with NVM"},{"location":"computer-setup/mac/#install-visual-studio-code","text":"If you don't have Visual Studio Code, you can install it with Homebrew: brew install --cask visual-studio-code If those instructions don't work, you can follow these instructions Configure Visual Studio Code Install the Live Share extension : code --install-extension ms-vsliveshare.vsliveshare Turn on Autosave Install the YAML extension. code --install-extension redhat.vscode-yaml","title":"Install Visual Studio Code"},{"location":"computer-setup/mac/#docker-desktop","text":"You can install docker desktop via brew: brew install --cask docker","title":"Docker Desktop"},{"location":"computer-setup/mac/#slack-app","text":"It's helpful to have the Slack Mac App .","title":"Slack App"},{"location":"computer-setup/mac/#ibm-cloud-cli","text":"Click the link below and follow the instructions: Install the IBM Cloud CLI","title":"IBM Cloud CLI"},{"location":"computer-setup/mac/#finish-your-first-assignment","text":"Assignments Repo","title":"Finish your first Assignment"},{"location":"computer-setup/overview/","text":"Background: Kubernetes and OpenShift K8s is a container orchestration platform. K8s can run your docker containers and optionally make them available to the internet K8s is kind of \"the operating system of the cloud\". OpenShift a suite of tools built on top of K8s. It provides concepts like: Projects Apps Class has a kubernetes cluster. Connecting to the OpenShift Cluster $HOME/bin needs to be in your path. oc - OpenShift CLI. The main way we interact with the cluster. You can also interact with the cluster from the console. Installed to $HOME/bin icc - bash script that automates some common cluster switching activities. Allows quick cluster switching. ibmcloud-account.yaml ibmcloud.yaml Sits on top of the ibmcloud CLI You can also login via \"Copy Login Command\" from the OpenShift Web Console igc - IBM Garage CLI A bunch of helpful tools for things like setting up pipelines really quickly Is a plugin to oc Provides a pipeline command Provides a sync command to oc Provides a console command to oc Written in node , and installed via an NPM package May or may not use at a client site argocd - Argo Continuous Delivery CLI (but we'll never use it) Others: kubectl - Kubernetes CLI. We basically won't use this because oc delegates to kubectl under the hood. Installed to $HOME/bin ibmcloud - IBM Cloud CLI Development git - Version control system. Where we store snapshots / history of code AND configs. Both code development And gitops node - Server-side JavaScript. Enables us to do client-side (React, Angular) and server-side NodeJS applications nvm - Node Version Manager. Allows you to install multiple versions of node, and switch between them per project code - command that opens Visual Studio Code brew - Homebrew. Package manager. Installs other software. React is a client-side, single-page-application Devops helm - Helm can take templated YAML files and produce valid K8s YAML files For class we'll almost never use this docker - Docker Desktop Allows you to build and run images/containers locally Fast feedback before running pipelines Trivia: can install a local K8s cluster","title":"Background: Kubernetes and OpenShift"},{"location":"computer-setup/overview/#background-kubernetes-and-openshift","text":"K8s is a container orchestration platform. K8s can run your docker containers and optionally make them available to the internet K8s is kind of \"the operating system of the cloud\". OpenShift a suite of tools built on top of K8s. It provides concepts like: Projects Apps Class has a kubernetes cluster.","title":"Background: Kubernetes and OpenShift"},{"location":"computer-setup/overview/#connecting-to-the-openshift-cluster","text":"$HOME/bin needs to be in your path. oc - OpenShift CLI. The main way we interact with the cluster. You can also interact with the cluster from the console. Installed to $HOME/bin icc - bash script that automates some common cluster switching activities. Allows quick cluster switching. ibmcloud-account.yaml ibmcloud.yaml Sits on top of the ibmcloud CLI You can also login via \"Copy Login Command\" from the OpenShift Web Console igc - IBM Garage CLI A bunch of helpful tools for things like setting up pipelines really quickly Is a plugin to oc Provides a pipeline command Provides a sync command to oc Provides a console command to oc Written in node , and installed via an NPM package May or may not use at a client site argocd - Argo Continuous Delivery CLI (but we'll never use it)","title":"Connecting to the OpenShift Cluster"},{"location":"computer-setup/overview/#others","text":"kubectl - Kubernetes CLI. We basically won't use this because oc delegates to kubectl under the hood. Installed to $HOME/bin ibmcloud - IBM Cloud CLI","title":"Others:"},{"location":"computer-setup/overview/#development","text":"git - Version control system. Where we store snapshots / history of code AND configs. Both code development And gitops node - Server-side JavaScript. Enables us to do client-side (React, Angular) and server-side NodeJS applications nvm - Node Version Manager. Allows you to install multiple versions of node, and switch between them per project code - command that opens Visual Studio Code brew - Homebrew. Package manager. Installs other software. React is a client-side, single-page-application","title":"Development"},{"location":"computer-setup/overview/#devops","text":"helm - Helm can take templated YAML files and produce valid K8s YAML files For class we'll almost never use this docker - Docker Desktop Allows you to build and run images/containers locally Fast feedback before running pipelines Trivia: can install a local K8s cluster","title":"Devops"},{"location":"computer-setup/windows/","text":"Windows Computer Setup Guide Webex Windows Side If you haven't already, Download Webex Meetings WSL 2 You must install WSL2 in order to complete this course. https://docs.microsoft.com/en-us/windows/wsl/install-win10 NOTE: Be sure to remember the password you set for your ubuntu user. You'll need this often. From PowerShell, run wsl - -list - -verbose Returns the Name of the Linux you installed, thr running state, the WSL version as 2 and the * marking default: NAME STATE VERSION * Ubuntu-18.04 Running 2 If you see something else, may need to set wsl defaults . In this case, to set the particular distro as default, use wsl --set-default Ubuntu-18.04 . Ubuntu Updates Ubuntu Side From the WSL Terminal, run the following: sudo apt-get update -y sudo apt-get install build-essential zsh -y Close and open your Terminal. Open a new Terminal window (or tab) Run the following command: echo $SHELL You have ZSH if you see the following output: /bin/zsh (Optional) oh-my-zsh Ubuntu Side Go to https://ohmyz.sh/ Follow instructions At the time of this writing, the command was: bash -c \" $( curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \" See also https://blog.joaograssi.com/windows-subsystem-for-linux-with-oh-my-zsh-conemu/ Homebrew Ubuntu Side Install Homebrew Visit https://brew.sh/ Click the \"Copy\" link and run the command. At the time of this writing, it's: /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" Add Homebrew to Path Add homebrew to your path in ~/.zshrc echo \"export PATH=\\\"/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:\\$PATH\\\"\" >> ~/.zshrc source ~/.zshrc Install common packages brew install gcc git Configure Git Ubuntu Side brew install git git config --global core.ignorecase false Set your name git config --global --list If you don't see your name and email, then run these commands: git config --global user.name \"<your actual name>\" git config --global user.email \"<your actual email>\" Install Helm Ubuntu Side brew install helm NodeJS with NVM Ubuntu Side Visit https://github.com/nvm-sh/nvm Follow the instructions At the time this article was written, the command is: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash source ~/.zshrc nvm install node nvm alias default node Install Visual Studio Code Windows Side Install Visual Studio Code following these instructions: https://code.visualstudio.com/docs/remote/wsl Configure Visual Studio Code Ubuntu Side Install the Live Share extension : code --install-extension ms-vsliveshare.vsliveshare Turn on Autosave Install the YAML extension. code --install-extension redhat.vscode-yaml Docker Desktop Follow instructions here to install Docker Desktop and configure for WSL2. https://docs.docker.com/docker-for-windows/wsl/ (Optional) Slack App It's helpful to have the Slack Mac App . IBM Cloud CLI Click the link below and follow the instructions: Install the IBM Cloud CLI Finish your first Assignment Assignments Repo","title":"Windows Computer Setup Guide"},{"location":"computer-setup/windows/#windows-computer-setup-guide","text":"","title":"Windows Computer Setup Guide"},{"location":"computer-setup/windows/#webex","text":"Windows Side If you haven't already, Download Webex Meetings","title":"Webex"},{"location":"computer-setup/windows/#wsl-2","text":"You must install WSL2 in order to complete this course. https://docs.microsoft.com/en-us/windows/wsl/install-win10 NOTE: Be sure to remember the password you set for your ubuntu user. You'll need this often. From PowerShell, run wsl - -list - -verbose Returns the Name of the Linux you installed, thr running state, the WSL version as 2 and the * marking default: NAME STATE VERSION * Ubuntu-18.04 Running 2 If you see something else, may need to set wsl defaults . In this case, to set the particular distro as default, use wsl --set-default Ubuntu-18.04 .","title":"WSL 2"},{"location":"computer-setup/windows/#ubuntu-updates","text":"Ubuntu Side From the WSL Terminal, run the following: sudo apt-get update -y sudo apt-get install build-essential zsh -y Close and open your Terminal. Open a new Terminal window (or tab) Run the following command: echo $SHELL You have ZSH if you see the following output: /bin/zsh","title":"Ubuntu Updates"},{"location":"computer-setup/windows/#optional-oh-my-zsh","text":"Ubuntu Side Go to https://ohmyz.sh/ Follow instructions At the time of this writing, the command was: bash -c \" $( curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \" See also https://blog.joaograssi.com/windows-subsystem-for-linux-with-oh-my-zsh-conemu/","title":"(Optional) oh-my-zsh"},{"location":"computer-setup/windows/#homebrew","text":"Ubuntu Side Install Homebrew Visit https://brew.sh/ Click the \"Copy\" link and run the command. At the time of this writing, it's: /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" Add Homebrew to Path Add homebrew to your path in ~/.zshrc echo \"export PATH=\\\"/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:\\$PATH\\\"\" >> ~/.zshrc source ~/.zshrc Install common packages brew install gcc git","title":"Homebrew"},{"location":"computer-setup/windows/#configure-git","text":"Ubuntu Side brew install git git config --global core.ignorecase false Set your name git config --global --list If you don't see your name and email, then run these commands: git config --global user.name \"<your actual name>\" git config --global user.email \"<your actual email>\"","title":"Configure Git"},{"location":"computer-setup/windows/#install-helm","text":"Ubuntu Side brew install helm","title":"Install Helm"},{"location":"computer-setup/windows/#nodejs-with-nvm","text":"Ubuntu Side Visit https://github.com/nvm-sh/nvm Follow the instructions At the time this article was written, the command is: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash source ~/.zshrc nvm install node nvm alias default node","title":"NodeJS with NVM"},{"location":"computer-setup/windows/#install-visual-studio-code","text":"Windows Side Install Visual Studio Code following these instructions: https://code.visualstudio.com/docs/remote/wsl","title":"Install Visual Studio Code"},{"location":"computer-setup/windows/#configure-visual-studio-code","text":"Ubuntu Side Install the Live Share extension : code --install-extension ms-vsliveshare.vsliveshare Turn on Autosave Install the YAML extension. code --install-extension redhat.vscode-yaml","title":"Configure Visual Studio Code"},{"location":"computer-setup/windows/#docker-desktop","text":"Follow instructions here to install Docker Desktop and configure for WSL2. https://docs.docker.com/docker-for-windows/wsl/","title":"Docker Desktop"},{"location":"computer-setup/windows/#optional-slack-app","text":"It's helpful to have the Slack Mac App .","title":"(Optional) Slack App"},{"location":"computer-setup/windows/#ibm-cloud-cli","text":"Click the link below and follow the instructions: Install the IBM Cloud CLI","title":"IBM Cloud CLI"},{"location":"computer-setup/windows/#finish-your-first-assignment","text":"Assignments Repo","title":"Finish your first Assignment"},{"location":"git/","text":"Cheatsheet Add New Content Default branch is either master or main . git add -A git commit -m \"message\" git pull git push origin <branch name> If you forget the -m flag in git commit, and it opens VI just type ESCAPE + :q Create a new branch git checkout -b <branch name> Switch branches git checkout <branch name> Git merge Let's say you are in a branch named user-30 and you want to pull in changes from master: git checkout master git pull git checkout user-30 git merge master","title":"Cheatsheet"},{"location":"git/#cheatsheet","text":"","title":"Cheatsheet"},{"location":"git/#add-new-content","text":"Default branch is either master or main . git add -A git commit -m \"message\" git pull git push origin <branch name> If you forget the -m flag in git commit, and it opens VI just type ESCAPE + :q","title":"Add New Content"},{"location":"git/#create-a-new-branch","text":"git checkout -b <branch name>","title":"Create a new branch"},{"location":"git/#switch-branches","text":"git checkout <branch name>","title":"Switch branches"},{"location":"git/#git-merge","text":"Let's say you are in a branch named user-30 and you want to pull in changes from master: git checkout master git pull git checkout user-30 git merge master","title":"Git merge"},{"location":"git/assignments/","text":"Assignments Repo NOTE For Windows users, run all commands from within Ubuntu (WSL) Add your user number to ~/.zshrc If you haven't done so yet, set your CGB_USER environment variable: Find your user number Run the following commands - replace XX with your user number: echo 'export CGB_USER=\"XX\"' >> ~/.zshrc && source ~/.zshrc && echo $CGB_USER Open Gogs Open the OpenShift Web Console: oc console Open the App Menu (the 9-box menu) Click \"Git Dev\" Sign In Click Sign In Enter userXX (replace XX with your user number) and the password password NOTE: get your user number from your instructor Find the Assignments Repository Under \"Collaborative Repositories\" click on \"assignments\". NOTE: if you don't see the repo there, ask your instructor to add you Clone the Repository Make sure that \"HTTP\" is selected (not SSH) Copy the URL Run the following command in terminal cd ~ git clone <URL> cd assignments Create a Branch git checkout -b user- $CGB_USER Complete your first assignment For the first assignment, we'll just output some software versions to a file. NOTE : you can copy the entire block of code and paste it in your terminal mkdir -p user- $CGB_USER echo \" $( brew --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \"Code version $( code --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \" $( docker --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \"Helm version $( which helm || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \" $( git --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \" $( ibmcloud --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \"igc version $( igc --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \"node version $( node --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \"npm version $( npm --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \"oc version $( oc version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md Then git add, commit and push to your branch: git add user- $CGB_USER git commit -m \"first assignment\" git push -u origin user- $CGB_USER Type your username in (for example user06 ) and the password password . Create a Pull Request Go to the branches tab: Find your branch and click \"New Pull Request\" Add a title, and click \"Create Pull Request\"","title":"Assignments Repo"},{"location":"git/assignments/#assignments-repo","text":"NOTE For Windows users, run all commands from within Ubuntu (WSL)","title":"Assignments Repo"},{"location":"git/assignments/#add-your-user-number-to-zshrc","text":"If you haven't done so yet, set your CGB_USER environment variable: Find your user number Run the following commands - replace XX with your user number: echo 'export CGB_USER=\"XX\"' >> ~/.zshrc && source ~/.zshrc && echo $CGB_USER","title":"Add your user number to ~/.zshrc"},{"location":"git/assignments/#open-gogs","text":"Open the OpenShift Web Console: oc console Open the App Menu (the 9-box menu) Click \"Git Dev\"","title":"Open Gogs"},{"location":"git/assignments/#sign-in","text":"Click Sign In Enter userXX (replace XX with your user number) and the password password NOTE: get your user number from your instructor","title":"Sign In"},{"location":"git/assignments/#find-the-assignments-repository","text":"Under \"Collaborative Repositories\" click on \"assignments\". NOTE: if you don't see the repo there, ask your instructor to add you","title":"Find the Assignments Repository"},{"location":"git/assignments/#clone-the-repository","text":"Make sure that \"HTTP\" is selected (not SSH) Copy the URL Run the following command in terminal cd ~ git clone <URL> cd assignments","title":"Clone the Repository"},{"location":"git/assignments/#create-a-branch","text":"git checkout -b user- $CGB_USER","title":"Create a Branch"},{"location":"git/assignments/#complete-your-first-assignment","text":"For the first assignment, we'll just output some software versions to a file. NOTE : you can copy the entire block of code and paste it in your terminal mkdir -p user- $CGB_USER echo \" $( brew --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \"Code version $( code --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \" $( docker --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \"Helm version $( which helm || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \" $( git --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \" $( ibmcloud --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \"igc version $( igc --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \"node version $( node --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \"npm version $( npm --version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md echo \"oc version $( oc version || echo ERROR ) \" >> user- $CGB_USER /software.md echo >> user- $CGB_USER /software.md Then git add, commit and push to your branch: git add user- $CGB_USER git commit -m \"first assignment\" git push -u origin user- $CGB_USER Type your username in (for example user06 ) and the password password .","title":"Complete your first assignment"},{"location":"git/assignments/#create-a-pull-request","text":"Go to the branches tab: Find your branch and click \"New Pull Request\" Add a title, and click \"Create Pull Request\"","title":"Create a Pull Request"},{"location":"openshift/","text":"Debugging ICC Cheatsheet ICC If you run icc <cluster-name> to log into a cluster and you see the following: Logging into ibmcloud: us-south/Default Logging into OpenShift cluster <cluster-name> with server url https://cXXXX.us-south.containers.cloud.ibm.com:30350 Error from server (InternalError): Internal error occurred: unexpected response: 500 It is because you have not yet visited that cluster's OpenShift web console in the browser. ibmcloud plugins There are two plugins that must be installed for ibmcloud, verify they are installed by running the following command: ibmcloud plugin list which should print something like the following (versions may be higher): Listing installed plug-ins... Plugin Name Version Status Private endpoints supported container-registry 0 .1.518 Update Available true container-service/kubernetes-service 1 .0.258 false Missing Plugin Install command container-registry ibmcloud plugin install container-registry container-service/kubernetes-service ibmcloud plugin install container-service oc sync failures The successful output from this command is: Setting up namespace <project-name> Setting up namespace: <project-name> Checking for existing project: <project-name> Creating project: <project-name> Copying ConfigMaps Copying Secrets Setting current project to <project-name> If you do not see all the above output, the command failed. (the code ignores all errors!) Error Message Solution None but some output lines are missing Run ibmcloud ks api , if that fails with FAILED 'ks' is not a registered command. then run ibmcloud plugin install container-service to fix it. You don't see Copying ConfigMaps Your permissions were setup incorrectly. Contact your instructor to fix them. oc pipeline --tekton failures Error Message Solution Error creating pipeline: \"Not a git repository\" cd into the application repository folder Error creating pipeline: It appears the kubernetes environment has not been initialized. Go to OpenShift \u2192 Click on Your Name \u2192 Click \"Copy Login Command\" \u2192 Click Display Token \u2192 copy oc login --token=... \u2192 Paste command in the terminal and hit enter. Error identifying git host run oc delete project project[user-number]-dev where [user-number] is replaced with your assigned user number. Wait a minute or two. run oc sync project[user-number]-dev then run oc pipeline --tekton Pipeline is not triggered when pushing to master branch pipeline webhook wasn't created. Run oc project project[user-number]-dev where [user-number] is replaced with your assigned user number. cd into the application repository folder Run oc sync Every time I git push, my pipeline runs twice Go to gogs, click Settings \u2192 Webhook and then delete one of the webhooks","title":"Debugging ICC"},{"location":"openshift/#debugging-icc","text":"Cheatsheet","title":"Debugging ICC"},{"location":"openshift/#icc","text":"If you run icc <cluster-name> to log into a cluster and you see the following: Logging into ibmcloud: us-south/Default Logging into OpenShift cluster <cluster-name> with server url https://cXXXX.us-south.containers.cloud.ibm.com:30350 Error from server (InternalError): Internal error occurred: unexpected response: 500 It is because you have not yet visited that cluster's OpenShift web console in the browser.","title":"ICC"},{"location":"openshift/#ibmcloud-plugins","text":"There are two plugins that must be installed for ibmcloud, verify they are installed by running the following command: ibmcloud plugin list which should print something like the following (versions may be higher): Listing installed plug-ins... Plugin Name Version Status Private endpoints supported container-registry 0 .1.518 Update Available true container-service/kubernetes-service 1 .0.258 false Missing Plugin Install command container-registry ibmcloud plugin install container-registry container-service/kubernetes-service ibmcloud plugin install container-service","title":"ibmcloud plugins"},{"location":"openshift/#oc-sync-failures","text":"The successful output from this command is: Setting up namespace <project-name> Setting up namespace: <project-name> Checking for existing project: <project-name> Creating project: <project-name> Copying ConfigMaps Copying Secrets Setting current project to <project-name> If you do not see all the above output, the command failed. (the code ignores all errors!) Error Message Solution None but some output lines are missing Run ibmcloud ks api , if that fails with FAILED 'ks' is not a registered command. then run ibmcloud plugin install container-service to fix it. You don't see Copying ConfigMaps Your permissions were setup incorrectly. Contact your instructor to fix them.","title":"oc sync  failures"},{"location":"openshift/#oc-pipeline-tekton-failures","text":"Error Message Solution Error creating pipeline: \"Not a git repository\" cd into the application repository folder Error creating pipeline: It appears the kubernetes environment has not been initialized. Go to OpenShift \u2192 Click on Your Name \u2192 Click \"Copy Login Command\" \u2192 Click Display Token \u2192 copy oc login --token=... \u2192 Paste command in the terminal and hit enter. Error identifying git host run oc delete project project[user-number]-dev where [user-number] is replaced with your assigned user number. Wait a minute or two. run oc sync project[user-number]-dev then run oc pipeline --tekton Pipeline is not triggered when pushing to master branch pipeline webhook wasn't created. Run oc project project[user-number]-dev where [user-number] is replaced with your assigned user number. cd into the application repository folder Run oc sync Every time I git push, my pipeline runs twice Go to gogs, click Settings \u2192 Webhook and then delete one of the webhooks","title":"oc pipeline --tekton failures"},{"location":"openshift/cheatsheet/","text":"Cheatsheet Login Find the cluster in IBM cloud Need to make sure you are in DTEV2 Click \"OpenShift Web Console\" If there's an error - refresh the page, try again Click on your name Click \"Copy Login Command\" Click \"Display Token\" Copy the entire oc login... command and paste it into your terminal \u2705 \u2705 How do I know if I completed this step? \u2705 \u2705 Open a new Terminal window or tab Run the following command: oc project It's successful if the output looks like: Using project... Otherwise, your login failed. Changing Projects At the command line Run the following command, replacing <project-name> with the project you'd like to switch to. oc project <project-name> In the UI Choose your project from the project filter in the upper left. Common Questions Which project am I on? oc project Which plugins are installed? oc plugin list Plugins are installed globally using npm. If no plugins are listed, it may because you switched node versions using nvm or because the global npm packages are not in your PATH. Run the following command to find the installation location for global packages: npm root -g More information For detailed information, see Getting started with the OpenShift CLI Debugging Steps get describe logs port-forward List things: oc get <type> See the actual YAML oc get <type> <name> -o yaml Describe also shows you more details about the current state: oc describe <type> <name> Logs oc logs <pod name> oc logs <pod name> -f oc logs <pod name> -c <container> Port-forward: oc port-forward pod/react-intro-6b7787654f-zw25x 8080 :8080 oc port-forward service/react-intro 8080 :80","title":"Cheatsheet"},{"location":"openshift/cheatsheet/#cheatsheet","text":"","title":"Cheatsheet"},{"location":"openshift/cheatsheet/#login","text":"Find the cluster in IBM cloud Need to make sure you are in DTEV2 Click \"OpenShift Web Console\" If there's an error - refresh the page, try again Click on your name Click \"Copy Login Command\" Click \"Display Token\" Copy the entire oc login... command and paste it into your terminal \u2705 \u2705 How do I know if I completed this step? \u2705 \u2705 Open a new Terminal window or tab Run the following command: oc project It's successful if the output looks like: Using project... Otherwise, your login failed.","title":"Login"},{"location":"openshift/cheatsheet/#changing-projects","text":"","title":"Changing Projects"},{"location":"openshift/cheatsheet/#at-the-command-line","text":"Run the following command, replacing <project-name> with the project you'd like to switch to. oc project <project-name>","title":"At the command line"},{"location":"openshift/cheatsheet/#in-the-ui","text":"Choose your project from the project filter in the upper left.","title":"In the UI"},{"location":"openshift/cheatsheet/#common-questions","text":"Which project am I on? oc project Which plugins are installed? oc plugin list Plugins are installed globally using npm. If no plugins are listed, it may because you switched node versions using nvm or because the global npm packages are not in your PATH. Run the following command to find the installation location for global packages: npm root -g","title":"Common Questions"},{"location":"openshift/cheatsheet/#more-information","text":"For detailed information, see Getting started with the OpenShift CLI","title":"More information"},{"location":"openshift/cheatsheet/#debugging-steps","text":"get describe logs port-forward List things: oc get <type> See the actual YAML oc get <type> <name> -o yaml Describe also shows you more details about the current state: oc describe <type> <name> Logs oc logs <pod name> oc logs <pod name> -f oc logs <pod name> -c <container> Port-forward: oc port-forward pod/react-intro-6b7787654f-zw25x 8080 :8080 oc port-forward service/react-intro 8080 :80","title":"Debugging Steps"},{"location":"projects/","text":"Projects Kickoff Meet in your squad's main room One person shares their screen and: Creates a React app Creates a Gogs repo (in your squad organization) Pushes the React app to the gogs repo Everyone else: Clones the Gogs repo (then cd into it) Runs npm install to install the project dependencies Code Organization Very early on, split the app into multiple components. Your App.js file should be thin, like this: import Deployment from \"./Deployments\" ; import LeadTimes from \"./LeadTimes\" ; import RecoveryTimes from \"./RecoveryTimes\" ; function App () { return ( < div > < Deployment /> < RecoveryTimes /> < LeadTimes /> < /div> ); } export default App ; Styling Option 1 You can just pull in CSS to your application Go to https://getbootstrap.com/ Go to \"Download\" Copy and paste the stylesheet to your public/index.html page Then, whenever you want a styled component, just add the class names. For example if the Bootstrap docs show you this HTML: < div class = \"row\" > < div class = \"col\" ></ div > </ div > You'd add this to your React component: < div className = \"row\" > < div className = \"col\" >< /div> < /div> Option 2 Use a component library: https://react-bootstrap.github.io/","title":"Projects"},{"location":"projects/#projects","text":"","title":"Projects"},{"location":"projects/#kickoff","text":"Meet in your squad's main room One person shares their screen and: Creates a React app Creates a Gogs repo (in your squad organization) Pushes the React app to the gogs repo Everyone else: Clones the Gogs repo (then cd into it) Runs npm install to install the project dependencies","title":"Kickoff"},{"location":"projects/#code-organization","text":"Very early on, split the app into multiple components. Your App.js file should be thin, like this: import Deployment from \"./Deployments\" ; import LeadTimes from \"./LeadTimes\" ; import RecoveryTimes from \"./RecoveryTimes\" ; function App () { return ( < div > < Deployment /> < RecoveryTimes /> < LeadTimes /> < /div> ); } export default App ;","title":"Code Organization"},{"location":"projects/#styling","text":"Option 1 You can just pull in CSS to your application Go to https://getbootstrap.com/ Go to \"Download\" Copy and paste the stylesheet to your public/index.html page Then, whenever you want a styled component, just add the class names. For example if the Bootstrap docs show you this HTML: < div class = \"row\" > < div class = \"col\" ></ div > </ div > You'd add this to your React component: < div className = \"row\" > < div className = \"col\" >< /div> < /div> Option 2 Use a component library: https://react-bootstrap.github.io/","title":"Styling"},{"location":"react/","text":"React NOTE For windows users, run all commands from within Ubuntu (WSL) Create the React app First, create a new React app: cd ~ npx create-react-app react-intro cd react-intro Start the React app npm start This should open http://localhost:3000 You should see a React welcome page. Run Tests npm test This starts an interactive test window. Tests should be green. Press q or CTRL+C to exit. Open Gogs Open the OpenShift Web Console oc console Open the App Menu (the 9-box menu) Click \"Git Dev\" Sign In (if needed) Click Sign In Enter userXX and the password password NOTE: get your user number from your instructor Create Repository Click \"New Repository\" Enter the name react-intro Click \"Create Repository\" Push Local Code to Gogs Copy the command at the bottom of the screen Paste the two lines in your Terminal, and use the following credentials: Username is userXX Password is password Refresh your repository page Submit the Assignment Go to Gogs Copy the URL to your react-intro repo Run the following commands: cd ~/assignments touch user- $CGB_USER /react-intro.md code . Find the react-intro.md file. Paste the URL to your react-intro repository. git add user- $CGB_USER git commit -m \"react intro\" git push -u origin user- $CGB_USER Create and submit a pull request. Future reading Testing a React App Containerizing a React App","title":"React"},{"location":"react/#react","text":"NOTE For windows users, run all commands from within Ubuntu (WSL)","title":"React"},{"location":"react/#create-the-react-app","text":"First, create a new React app: cd ~ npx create-react-app react-intro cd react-intro","title":"Create the React app"},{"location":"react/#start-the-react-app","text":"npm start This should open http://localhost:3000 You should see a React welcome page.","title":"Start the React app"},{"location":"react/#run-tests","text":"npm test This starts an interactive test window. Tests should be green. Press q or CTRL+C to exit.","title":"Run Tests"},{"location":"react/#open-gogs","text":"Open the OpenShift Web Console oc console Open the App Menu (the 9-box menu) Click \"Git Dev\"","title":"Open Gogs"},{"location":"react/#sign-in-if-needed","text":"Click Sign In Enter userXX and the password password NOTE: get your user number from your instructor","title":"Sign In (if needed)"},{"location":"react/#create-repository","text":"Click \"New Repository\" Enter the name react-intro Click \"Create Repository\"","title":"Create Repository"},{"location":"react/#push-local-code-to-gogs","text":"Copy the command at the bottom of the screen Paste the two lines in your Terminal, and use the following credentials: Username is userXX Password is password Refresh your repository page","title":"Push Local Code to Gogs"},{"location":"react/#submit-the-assignment","text":"Go to Gogs Copy the URL to your react-intro repo Run the following commands: cd ~/assignments touch user- $CGB_USER /react-intro.md code . Find the react-intro.md file. Paste the URL to your react-intro repository. git add user- $CGB_USER git commit -m \"react intro\" git push -u origin user- $CGB_USER Create and submit a pull request.","title":"Submit the Assignment"},{"location":"react/#future-reading","text":"Testing a React App Containerizing a React App","title":"Future reading"},{"location":"react/docker/","text":"Dockerizing a React App Option 1: Multistage build nginx.conf (same as above): server { listen 8080 ; server_name localhost ; location / { root /usr/share/nginx/html ; index index.html index.htm ; try_files $uri $uri/ /index.html = 404 ; } error_page 500 502 503 504 /50x.html ; location = /50x.html { root /usr/share/nginx/html ; } } Dockerfile FROM quay.io/jeffdean/node-alpine as build WORKDIR /app COPY . . RUN npm install RUN npm run build FROM quay.io/jeffdean/nginx-unprivileged COPY --from = build /app/build /usr/share/nginx/html COPY --from = build /app/nginx.conf /etc/nginx/conf.d/default.conf Then from the command line, to build you would execute the following commands: # no need to run npm build docker build --no-cache -t dockerized-react-app . docker run -it -p 8080 :8080 --rm dockerized-react-app Then open http://localhost:8080 in your browser to see it work. Pros : You don't need to build the react app separately Cons : The Dockerfile is more complex, and re-downloads npm packages and re-runs the build which might not be necessary (depending on your build system). \ud83d\uded1 Everything below here is trivia. Background Public DockerHub images are severely rate-limited . quay.io does not have rate limits on public repositories. See the Docker Lab for more information on how to create a quay.io account. On a client site, you will have an internal docker registry. In fact, even in class there's an internal docker registry which you can use. You can see access information about the OpenShift image repository by running igc credentials . For this tutorial we're referencing images pushed to a personal quay.io account. \u274c\ufe0f\u274c WARNING: these images are not maintained up-to-date and may contain un-patched security vulnerabilities. DO NOT USE on a production application. \u274c\u274c If you want a more recent image, do the following: export QUAY_USER = <your quay.io username> docker pull node:alpine docker tag node:alpine quay.io/ $QUAY_USER /node-alpine docker push quay.io/ $QUAY_USER /node-alpine docker pull nginxinc/nginx-unprivileged docker tag nginxinc/nginx-unprivileged quay.io/ $QUAY_USER /nginx-unprivileged docker push quay.io/ $QUAY_USER /nginx-unprivileged Option 1: Build then Build \ud83d\ude09 React applications (as well as other single-page applications) compile down to static files (HTML, CSS, fonts, etc...). In order to build these applications, you need to add two files: Dockerfile nginx.conf nginx.conf : server { listen 8080 ; server_name localhost ; location / { root /usr/share/nginx/html ; index index.html index.htm ; try_files $uri $uri/ /index.html = 404 ; } error_page 500 502 503 504 /50x.html ; location = /50x.html { root /usr/share/nginx/html ; } } Dockerfile FROM quay.io/jeffdean/nginx-unprivileged COPY build /usr/share/nginx/html COPY nginx.conf /etc/nginx/conf.d/default.conf Then from the command line, to build you would execute the following commands: npm run build docker build -t dockerized-react-app . docker run -it -p 8080 :8080 --rm dockerized-react-app Then open http://localhost:8080 in your browser to see it work. Pros Your Dockerfile is super simple. Cons You need to build the application before building the Dockerfile.","title":"Dockerizing a React App"},{"location":"react/docker/#dockerizing-a-react-app","text":"","title":"Dockerizing a React App"},{"location":"react/docker/#option-1-multistage-build","text":"nginx.conf (same as above): server { listen 8080 ; server_name localhost ; location / { root /usr/share/nginx/html ; index index.html index.htm ; try_files $uri $uri/ /index.html = 404 ; } error_page 500 502 503 504 /50x.html ; location = /50x.html { root /usr/share/nginx/html ; } } Dockerfile FROM quay.io/jeffdean/node-alpine as build WORKDIR /app COPY . . RUN npm install RUN npm run build FROM quay.io/jeffdean/nginx-unprivileged COPY --from = build /app/build /usr/share/nginx/html COPY --from = build /app/nginx.conf /etc/nginx/conf.d/default.conf Then from the command line, to build you would execute the following commands: # no need to run npm build docker build --no-cache -t dockerized-react-app . docker run -it -p 8080 :8080 --rm dockerized-react-app Then open http://localhost:8080 in your browser to see it work. Pros : You don't need to build the react app separately Cons : The Dockerfile is more complex, and re-downloads npm packages and re-runs the build which might not be necessary (depending on your build system). \ud83d\uded1 Everything below here is trivia.","title":"Option 1: Multistage build"},{"location":"react/docker/#background","text":"Public DockerHub images are severely rate-limited . quay.io does not have rate limits on public repositories. See the Docker Lab for more information on how to create a quay.io account. On a client site, you will have an internal docker registry. In fact, even in class there's an internal docker registry which you can use. You can see access information about the OpenShift image repository by running igc credentials . For this tutorial we're referencing images pushed to a personal quay.io account. \u274c\ufe0f\u274c WARNING: these images are not maintained up-to-date and may contain un-patched security vulnerabilities. DO NOT USE on a production application. \u274c\u274c If you want a more recent image, do the following: export QUAY_USER = <your quay.io username> docker pull node:alpine docker tag node:alpine quay.io/ $QUAY_USER /node-alpine docker push quay.io/ $QUAY_USER /node-alpine docker pull nginxinc/nginx-unprivileged docker tag nginxinc/nginx-unprivileged quay.io/ $QUAY_USER /nginx-unprivileged docker push quay.io/ $QUAY_USER /nginx-unprivileged","title":"Background"},{"location":"react/docker/#option-1-build-then-build","text":"React applications (as well as other single-page applications) compile down to static files (HTML, CSS, fonts, etc...). In order to build these applications, you need to add two files: Dockerfile nginx.conf nginx.conf : server { listen 8080 ; server_name localhost ; location / { root /usr/share/nginx/html ; index index.html index.htm ; try_files $uri $uri/ /index.html = 404 ; } error_page 500 502 503 504 /50x.html ; location = /50x.html { root /usr/share/nginx/html ; } } Dockerfile FROM quay.io/jeffdean/nginx-unprivileged COPY build /usr/share/nginx/html COPY nginx.conf /etc/nginx/conf.d/default.conf Then from the command line, to build you would execute the following commands: npm run build docker build -t dockerized-react-app . docker run -it -p 8080 :8080 --rm dockerized-react-app Then open http://localhost:8080 in your browser to see it work. Pros Your Dockerfile is super simple. Cons You need to build the application before building the Dockerfile.","title":"Option 1: Build then Build \ud83d\ude09"},{"location":"react/testing/","text":"Testing a React App Example Component: import React , { useState } from \"react\" ; function App () { // define state for the list of books const [ books , setBooks ] = useState ([]); // define state for the book form const [ newBook , setNewBook ] = useState ({ title : \"\" , author : \"\" }); // define the function that runs when the form is submitted const onSubmit = ( e ) => { e . preventDefault (); setBooks (( books ) => [... books , newBook ]); setNewBook ({ title : \"\" , author : \"\" }); }; return ( < div className = \"container pt-5\" > < h1 > Books < /h1> < form onSubmit = { onSubmit } > < p > < label htmlFor = \"title\" > Title < /label> < input id = \"title\" className = \"form-control\" type = \"text\" name = \"title\" value = { newBook . title } onChange = {( e ) => setNewBook ({ ... newBook , title : e . target . value })} /> < /p> < p > < label htmlFor = \"author\" > Author < /label> < input id = \"author\" className = \"form-control\" type = \"text\" name = \"author\" value = { newBook . author } onChange = {( e ) => setNewBook ({ ... newBook , author : e . target . value })} /> < /p> < button className = \"btn btn-primary\" > Add Book < /button> < /form> < table className = \"table table-striped mt-5\" > < tbody > { books . map (( book , i ) => ( < tr key = { i } > < td > { book . title } < /td> < td > { book . author } < /td> < /tr> ))} < /tbody> < /table> < /div> ); } export default App ; Example Test: import { render , screen } from \"@testing-library/react\" ; import App from \"./App\" ; import userEvent from \"@testing-library/user-event\" ; test ( \"allows users to add recovery times\" , () => { render ( < App /> ); const titleField = screen . getByLabelText ( \"Title\" ); const authorField = screen . getByLabelText ( \"Author\" ); userEvent . type ( titleField , \"Accelerate\" ); userEvent . type ( authorField , \"Jez Humble\" ); userEvent . click ( screen . getByRole ( \"button\" )); expect ( screen . getByText ( /Accelerate/ )). toBeVisible (); expect ( screen . getByText ( /Jez Humble/ )). toBeVisible (); }); Links https://testing-library.com/docs/ecosystem-user-event/ https://kentcdodds.com/blog/common-mistakes-with-react-testing-library https://www.robinwieruch.de/react-testing-library","title":"Testing a React App"},{"location":"react/testing/#testing-a-react-app","text":"Example Component: import React , { useState } from \"react\" ; function App () { // define state for the list of books const [ books , setBooks ] = useState ([]); // define state for the book form const [ newBook , setNewBook ] = useState ({ title : \"\" , author : \"\" }); // define the function that runs when the form is submitted const onSubmit = ( e ) => { e . preventDefault (); setBooks (( books ) => [... books , newBook ]); setNewBook ({ title : \"\" , author : \"\" }); }; return ( < div className = \"container pt-5\" > < h1 > Books < /h1> < form onSubmit = { onSubmit } > < p > < label htmlFor = \"title\" > Title < /label> < input id = \"title\" className = \"form-control\" type = \"text\" name = \"title\" value = { newBook . title } onChange = {( e ) => setNewBook ({ ... newBook , title : e . target . value })} /> < /p> < p > < label htmlFor = \"author\" > Author < /label> < input id = \"author\" className = \"form-control\" type = \"text\" name = \"author\" value = { newBook . author } onChange = {( e ) => setNewBook ({ ... newBook , author : e . target . value })} /> < /p> < button className = \"btn btn-primary\" > Add Book < /button> < /form> < table className = \"table table-striped mt-5\" > < tbody > { books . map (( book , i ) => ( < tr key = { i } > < td > { book . title } < /td> < td > { book . author } < /td> < /tr> ))} < /tbody> < /table> < /div> ); } export default App ; Example Test: import { render , screen } from \"@testing-library/react\" ; import App from \"./App\" ; import userEvent from \"@testing-library/user-event\" ; test ( \"allows users to add recovery times\" , () => { render ( < App /> ); const titleField = screen . getByLabelText ( \"Title\" ); const authorField = screen . getByLabelText ( \"Author\" ); userEvent . type ( titleField , \"Accelerate\" ); userEvent . type ( authorField , \"Jez Humble\" ); userEvent . click ( screen . getByRole ( \"button\" )); expect ( screen . getByText ( /Accelerate/ )). toBeVisible (); expect ( screen . getByText ( /Jez Humble/ )). toBeVisible (); });","title":"Testing a React App"},{"location":"react/testing/#links","text":"https://testing-library.com/docs/ecosystem-user-event/ https://kentcdodds.com/blog/common-mistakes-with-react-testing-library https://www.robinwieruch.de/react-testing-library","title":"Links"},{"location":"reading-list/","text":"Reading List Technical Accelerate Extreme Programming Explained Effective JavaScript Eloquent JavaScript JavaScript the good parts Effective Java Clean Code Test Driven Development Refactoring Don't make me think Head First Design Patterns The Pragmatic Programmer 97 Things Every Programmer should know 97 Things Every Architect should know Concurrent Programming in Java Growing Object-Oriented Software, Guided by Tests The mythical man month The Art of Computer Programming Range: Why Generalists Triumph in a Specialized World Refactoring: Improving the Design of Existing Code (2nd Edition) Non-Technical Turn the ship around The Drunkards Walk The Lean Startup The Personal MBA The Coaching Habit The Obstacle is the way Value proposition design The Phoenix Project The Unicorn Project Emotional Intelligence 2.0 Social Intelligence The Compound Effect Start with Why Thinking in Bets Drive Blink Unlimited Memory: How to Use Advanced Learning Strategies to Learn Faster, Remember More and be More Productive Practical Intelligence: The Art and Science of Common Sense The Expertise Economy: How the smartest companies use learning to engage, compete, and succeed","title":"Reading List"},{"location":"reading-list/#reading-list","text":"","title":"Reading List"},{"location":"reading-list/#technical","text":"Accelerate Extreme Programming Explained Effective JavaScript Eloquent JavaScript JavaScript the good parts Effective Java Clean Code Test Driven Development Refactoring Don't make me think Head First Design Patterns The Pragmatic Programmer 97 Things Every Programmer should know 97 Things Every Architect should know Concurrent Programming in Java Growing Object-Oriented Software, Guided by Tests The mythical man month The Art of Computer Programming Range: Why Generalists Triumph in a Specialized World Refactoring: Improving the Design of Existing Code (2nd Edition)","title":"Technical"},{"location":"reading-list/#non-technical","text":"Turn the ship around The Drunkards Walk The Lean Startup The Personal MBA The Coaching Habit The Obstacle is the way Value proposition design The Phoenix Project The Unicorn Project Emotional Intelligence 2.0 Social Intelligence The Compound Effect Start with Why Thinking in Bets Drive Blink Unlimited Memory: How to Use Advanced Learning Strategies to Learn Faster, Remember More and be More Productive Practical Intelligence: The Art and Science of Common Sense The Expertise Economy: How the smartest companies use learning to engage, compete, and succeed","title":"Non-Technical"},{"location":"tdd/","text":"TDD in JavaScript / Jest NOTE this tutorial assumes you've already created a react-intro app Concepts When you write automated tests, there are two files: Your test file Your code file (your production code) TDD Behavior - 3 Step (Red) Write a failing test (Green) Make the test pass (Refactor) Make improvements to the code that don't change the behavior Once you've written 3 tests 2 Rules of TDD Only write production code in response to a failing test Write the simplest thing to make the test pass Ensures that you have you complete and thorough. Steps Create the test file Put it right next to the code file name it <name>.test.js describe ( \"convert\" , () => { it ( \"returns 0 when passed 32\" , () => {}); }); Write the first test: describe ( \"convert\" , () => { it ( \"returns 0 when passed 32\" , () => { // SEA // setup const degreesInFahrenheit = 32 ; const expected = 0 ; // execution const actual = convert ( degreesInFahrenheit ); // assertion expect ( actual ). toEqual ( expected ); }); }); Write the production code file convert.js Write enough code to make it pass: export default function convert ( input ) { return 0 ; } Import the function in the test file and make it green: import convert from './convert' ; describe ( \"convert\" , () => { it ( \"returns 0 when passed 32\" , () => { // SEA // setup const degreesInFahrenheit = 32 ; const expected = 0 ; // execution const actual = convert ( degreesInFahrenheit ); // assertion expect ( actual ). toEqual ( expected ); }); }); Rinse and repeat","title":"TDD in JavaScript / Jest"},{"location":"tdd/#tdd-in-javascript-jest","text":"NOTE this tutorial assumes you've already created a react-intro app","title":"TDD in JavaScript / Jest"},{"location":"tdd/#concepts","text":"When you write automated tests, there are two files: Your test file Your code file (your production code)","title":"Concepts"},{"location":"tdd/#tdd-behavior-3-step","text":"(Red) Write a failing test (Green) Make the test pass (Refactor) Make improvements to the code that don't change the behavior Once you've written 3 tests","title":"TDD Behavior - 3 Step"},{"location":"tdd/#2-rules-of-tdd","text":"Only write production code in response to a failing test Write the simplest thing to make the test pass Ensures that you have you complete and thorough.","title":"2 Rules of TDD"},{"location":"tdd/#steps","text":"Create the test file Put it right next to the code file name it <name>.test.js describe ( \"convert\" , () => { it ( \"returns 0 when passed 32\" , () => {}); }); Write the first test: describe ( \"convert\" , () => { it ( \"returns 0 when passed 32\" , () => { // SEA // setup const degreesInFahrenheit = 32 ; const expected = 0 ; // execution const actual = convert ( degreesInFahrenheit ); // assertion expect ( actual ). toEqual ( expected ); }); }); Write the production code file convert.js Write enough code to make it pass: export default function convert ( input ) { return 0 ; } Import the function in the test file and make it green: import convert from './convert' ; describe ( \"convert\" , () => { it ( \"returns 0 when passed 32\" , () => { // SEA // setup const degreesInFahrenheit = 32 ; const expected = 0 ; // execution const actual = convert ( degreesInFahrenheit ); // assertion expect ( actual ). toEqual ( expected ); }); }); Rinse and repeat","title":"Steps"},{"location":"tekton/","text":"CI with Tekton Go into your react-intro application cd ~/react-intro Make sure that tests pass Run the following command: CI = true npm test \ud83d\uded1 NOTE: You should see that all of your tests pass. If all of your tests don't pass, do not continue. Fix your tests. Make sure your code is on Gogs Run the following command: git status You should have no changes to commit. If you have changes to commit. git add -A git commit -m \"changes for pipeline\" git push origin master Log Into the cluster icc <cluster name> For example: icc cohort7 \ud83d\uded1 If ICC doesn't work for you open the OpenShift Web Console and login via \"Copy Login Command\" Create a new project Make sure your user number is set in your environment: echo $CGB_USER You should see something like 03 oc sync react-intro- $CGB_USER -dev You should see output like this: Setting up namespace react-intro... Setting up namespace: react-intro... Checking for existing project: react-intro... Creating project: react-intro... Copying ConfigMaps Copying Secrets Setting current project to react-intro... Then type oc project and you should see: Using project \"react-intro-99-dev\" on server \"https://c109-e.us-east.containers.cloud.ibm.com:31982\" . \ud83d\uded1 If you see Using project \"default\" it means your project creation did not work. Make sure you are logged in and have permissions. You may need to contact your instructor. Create the Tekton Pipeline Create the pipeline: oc pipeline --tekton Select the Pipeline to use in the Pipeline Run: choose the most appropriate pipeline for your project For React, choose ibm-nodejs Image scan (y/n) type n Lint dockerfile (y/n) type n This will create a new pipeline and add the application to the gitops repository qa environment. If successful, the Pipeline Run URL is printed out. CMD+click on the URL to open in your default browser and see if the pipeline passes or fails. \ud83d\uded1 If the pipeline fails, use the troubleshooting tables below to fix the failure: Run oc console to open a console In the sidebar, go to Pipelines Click the latest Pipeline Run Verify that your test stage passes Adding the Dockerfile Add the following file to the root of your react-intro app: nginx.conf (same as above): server { listen 8080 ; server_name localhost ; location / { root /usr/share/nginx/html ; index index.html index.htm ; try_files $uri $uri/ /index.html = 404 ; } error_page 500 502 503 504 /50x.html ; location = /50x.html { root /usr/share/nginx/html ; } } Add the following file to the root of your react-intro app: Dockerfile FROM quay.io/jeffdean/node-alpine as build WORKDIR /app COPY . . RUN npm install RUN npm run build FROM quay.io/jeffdean/nginx-unprivileged COPY --from = build /app/build /usr/share/nginx/html COPY --from = build /app/nginx.conf /etc/nginx/conf.d/default.conf Then from the command line, to build you would execute the following commands: # no need to run npm build docker build --no-cache -t dockerized-react-app . docker run -it -p 8080 :8080 --rm dockerized-react-app Then open http://localhost:8080 in your browser to see it work. Once it works locally: Git add commit and push Verify that the \"build\" stage in your pipeline passes Add the Helm Chart Download this zip file You can see the contents here Unzip the file Move the chart directory to your react-app folder. For example: pwd # <-- make sure you are in the react-intro directory mv ~/Downloads/chart . Git add / commit and push View your pipeline run in the OpenShift console Verify that the \"Deploy\" step passes Pipeline failures You'll see the most errors the first time you are setting up the pipeline. Error Message Solution Error Unable to identify git host type You may have entered your GitHub credentials, not userXX and password for Gogs. In OC Console, click developer view, select your project, then select \"Secrets\" on the left, then select git-credentials , then \"Actions\", then \"Edit Secret\", enter in userXX and password . test stage Error Message Solution The test stage fails Run the following command locally and fix any errors CI=true npm test NOTE: if you want to ignore a failing test (just so you can move onto the next stage during class) you can change test to test.skip build stage Error Message Solution error reading info about \"/source/Dockerfile\": stat /source/Dockerfile: no such file or directory Containerize the application The build stage fails Run the following command locally and fix any errors docker build -t <application-name> . Replace <application-name> with the correct application name. deploy stage Error Message Solution cp: can't create directory '/ ': Permission denied Add helm charts render locally with helm template <release-name> ./chart/base where <release-name> is the name of your application in all lower case. error: deployment \"react-intro\" exceeded its progress deadline This means the pods never came up. If you login to the project from terminal and run oc get pods , look for the pod that is failing (it will not be named using the pipeline run). You should see at least one that is not running. Then oc describe pod <pod-name> and/or oc logs <pod-name> to find out why it is not running error: object has been deleted The namespace or Argo project name is the same as your repository name. Delete the namespace or Argo project and recreate it with a new unique name. dockerfile-lint stage Error Message Solution dockerfile-lint stage fails Set lint-dockerfile to false in the pipeline parameters (see the image below) img-scan stage Error Message Solution The img-scan stage fails Set scan-image to false in the pipeline parameters (see the image below) health stage Error Message Solution contains https:// in the error message Add a health-protocol key with a value of http to the pipeline parameters tag-release stage Error Message Solution The tag already exists delete the tag on origin by running git push --delete origin <tag-name> where [tag-name> is replaced with the conflicting tag value. Then delete the tag locally, if it exists, by running git tag -d <tag-name> helm-release stage Error Message Solution It looks like your Artifactory installation is not complete. Instructor should follow setup instructions at https://cloudnativetoolkit.dev/admin/artifactory-setup/ Other failures Error Message Solution Pod with a status of ErrImagePull or ImagePullBackOff. oc describe pod <pod-name> to verify status - Add an ImagePullSecret for the private registry. Container does not run, crashes, or other application error Diagnose pod issues by looking at the logs: oc get pod oc describe pod <pod-name> oc logs <pod-name> oc logs <pod-name> -f <- streams the logs Or run locally: docker build ... then docker run... Pipeline parameters The following is a screenshot of the pipeline parameters page: Finding your pipeline Select developer view Select pipelines Filter projects by name","title":"CI with Tekton"},{"location":"tekton/#ci-with-tekton","text":"","title":"CI with Tekton"},{"location":"tekton/#go-into-your-react-intro-application","text":"cd ~/react-intro","title":"Go into your react-intro application"},{"location":"tekton/#make-sure-that-tests-pass","text":"Run the following command: CI = true npm test \ud83d\uded1 NOTE: You should see that all of your tests pass. If all of your tests don't pass, do not continue. Fix your tests.","title":"Make sure that tests pass"},{"location":"tekton/#make-sure-your-code-is-on-gogs","text":"Run the following command: git status You should have no changes to commit. If you have changes to commit. git add -A git commit -m \"changes for pipeline\" git push origin master","title":"Make sure your code is on Gogs"},{"location":"tekton/#log-into-the-cluster","text":"icc <cluster name> For example: icc cohort7 \ud83d\uded1 If ICC doesn't work for you open the OpenShift Web Console and login via \"Copy Login Command\"","title":"Log Into the cluster"},{"location":"tekton/#create-a-new-project","text":"Make sure your user number is set in your environment: echo $CGB_USER You should see something like 03 oc sync react-intro- $CGB_USER -dev You should see output like this: Setting up namespace react-intro... Setting up namespace: react-intro... Checking for existing project: react-intro... Creating project: react-intro... Copying ConfigMaps Copying Secrets Setting current project to react-intro... Then type oc project and you should see: Using project \"react-intro-99-dev\" on server \"https://c109-e.us-east.containers.cloud.ibm.com:31982\" . \ud83d\uded1 If you see Using project \"default\" it means your project creation did not work. Make sure you are logged in and have permissions. You may need to contact your instructor.","title":"Create a new project"},{"location":"tekton/#create-the-tekton-pipeline","text":"Create the pipeline: oc pipeline --tekton Select the Pipeline to use in the Pipeline Run: choose the most appropriate pipeline for your project For React, choose ibm-nodejs Image scan (y/n) type n Lint dockerfile (y/n) type n This will create a new pipeline and add the application to the gitops repository qa environment. If successful, the Pipeline Run URL is printed out. CMD+click on the URL to open in your default browser and see if the pipeline passes or fails. \ud83d\uded1 If the pipeline fails, use the troubleshooting tables below to fix the failure: Run oc console to open a console In the sidebar, go to Pipelines Click the latest Pipeline Run Verify that your test stage passes","title":"Create the Tekton Pipeline"},{"location":"tekton/#adding-the-dockerfile","text":"Add the following file to the root of your react-intro app: nginx.conf (same as above): server { listen 8080 ; server_name localhost ; location / { root /usr/share/nginx/html ; index index.html index.htm ; try_files $uri $uri/ /index.html = 404 ; } error_page 500 502 503 504 /50x.html ; location = /50x.html { root /usr/share/nginx/html ; } } Add the following file to the root of your react-intro app: Dockerfile FROM quay.io/jeffdean/node-alpine as build WORKDIR /app COPY . . RUN npm install RUN npm run build FROM quay.io/jeffdean/nginx-unprivileged COPY --from = build /app/build /usr/share/nginx/html COPY --from = build /app/nginx.conf /etc/nginx/conf.d/default.conf Then from the command line, to build you would execute the following commands: # no need to run npm build docker build --no-cache -t dockerized-react-app . docker run -it -p 8080 :8080 --rm dockerized-react-app Then open http://localhost:8080 in your browser to see it work. Once it works locally: Git add commit and push Verify that the \"build\" stage in your pipeline passes","title":"Adding the Dockerfile"},{"location":"tekton/#add-the-helm-chart","text":"Download this zip file You can see the contents here Unzip the file Move the chart directory to your react-app folder. For example: pwd # <-- make sure you are in the react-intro directory mv ~/Downloads/chart . Git add / commit and push View your pipeline run in the OpenShift console Verify that the \"Deploy\" step passes","title":"Add the Helm Chart"},{"location":"tekton/#pipeline-failures","text":"You'll see the most errors the first time you are setting up the pipeline. Error Message Solution Error Unable to identify git host type You may have entered your GitHub credentials, not userXX and password for Gogs. In OC Console, click developer view, select your project, then select \"Secrets\" on the left, then select git-credentials , then \"Actions\", then \"Edit Secret\", enter in userXX and password . test stage Error Message Solution The test stage fails Run the following command locally and fix any errors CI=true npm test NOTE: if you want to ignore a failing test (just so you can move onto the next stage during class) you can change test to test.skip build stage Error Message Solution error reading info about \"/source/Dockerfile\": stat /source/Dockerfile: no such file or directory Containerize the application The build stage fails Run the following command locally and fix any errors docker build -t <application-name> . Replace <application-name> with the correct application name. deploy stage Error Message Solution cp: can't create directory '/ ': Permission denied Add helm charts render locally with helm template <release-name> ./chart/base where <release-name> is the name of your application in all lower case. error: deployment \"react-intro\" exceeded its progress deadline This means the pods never came up. If you login to the project from terminal and run oc get pods , look for the pod that is failing (it will not be named using the pipeline run). You should see at least one that is not running. Then oc describe pod <pod-name> and/or oc logs <pod-name> to find out why it is not running error: object has been deleted The namespace or Argo project name is the same as your repository name. Delete the namespace or Argo project and recreate it with a new unique name. dockerfile-lint stage Error Message Solution dockerfile-lint stage fails Set lint-dockerfile to false in the pipeline parameters (see the image below) img-scan stage Error Message Solution The img-scan stage fails Set scan-image to false in the pipeline parameters (see the image below) health stage Error Message Solution contains https:// in the error message Add a health-protocol key with a value of http to the pipeline parameters tag-release stage Error Message Solution The tag already exists delete the tag on origin by running git push --delete origin <tag-name> where [tag-name> is replaced with the conflicting tag value. Then delete the tag locally, if it exists, by running git tag -d <tag-name> helm-release stage Error Message Solution It looks like your Artifactory installation is not complete. Instructor should follow setup instructions at https://cloudnativetoolkit.dev/admin/artifactory-setup/","title":"Pipeline failures"},{"location":"tekton/#other-failures","text":"Error Message Solution Pod with a status of ErrImagePull or ImagePullBackOff. oc describe pod <pod-name> to verify status - Add an ImagePullSecret for the private registry. Container does not run, crashes, or other application error Diagnose pod issues by looking at the logs: oc get pod oc describe pod <pod-name> oc logs <pod-name> oc logs <pod-name> -f <- streams the logs Or run locally: docker build ... then docker run...","title":"Other failures"},{"location":"tekton/#pipeline-parameters","text":"The following is a screenshot of the pipeline parameters page:","title":"Pipeline parameters"},{"location":"tekton/#finding-your-pipeline","text":"Select developer view Select pipelines Filter projects by name","title":"Finding your pipeline"},{"location":"tekton/diagram/","text":"Sequence Diagram https://www.websequencediagrams.com/ title Continuous Integration participant Developer participant Code Repo participant CI Pipeline participant Image Registry participant K8s Dev Developer->Code Repo: git push Code Repo->CI Pipeline: webhook CI Pipeline->Code Repo: git pull note right of CI Pipeline: npm test note right of CI Pipeline: security scans note right of CI Pipeline: linting note right of CI Pipeline: docker build CI Pipeline->Image Registry: docker push (quay.io, etc...) note right of CI Pipeline: update helm values.yaml CI Pipeline->K8s Dev: helm upgrade K8s Dev->Image Registry: docker pull note right of K8s Dev: docker run...","title":"Sequence Diagram"},{"location":"tekton/diagram/#sequence-diagram","text":"https://www.websequencediagrams.com/ title Continuous Integration participant Developer participant Code Repo participant CI Pipeline participant Image Registry participant K8s Dev Developer->Code Repo: git push Code Repo->CI Pipeline: webhook CI Pipeline->Code Repo: git pull note right of CI Pipeline: npm test note right of CI Pipeline: security scans note right of CI Pipeline: linting note right of CI Pipeline: docker build CI Pipeline->Image Registry: docker push (quay.io, etc...) note right of CI Pipeline: update helm values.yaml CI Pipeline->K8s Dev: helm upgrade K8s Dev->Image Registry: docker pull note right of K8s Dev: docker run...","title":"Sequence Diagram"}]}